// Test generated by RoostGPT for test ballot-go-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

package test

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCountVote(t *testing.T) {
	type args struct {
		votes map[string]int
	}
	tests := []struct {
		name string
		args args
		want ResultBoard
	}{
		{"empty vote", args{}, ResultBoard{}},
		{"single candidate vote", map["candidate1"]=50, ResultBoard{{"candidate1", 50}}},
		{"multi candidates vote", map["candidate1"]=30, map["candidate2"]=40, ResultBoard{{"candidate1", 30}, {"candidate2", 40}}},
		{"vote with invalid candidate id", map["invalid"]=10, Error("Invalid candidate ID")},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := countVote(tt.args.votes)
			if!assert.NoError(t, err) {
				return
			}
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestGetCandidatesVote(t *testing.T) {
	type args struct {
		id string
	}
	tests := []struct {
		name string
		args args
		want map[string]int
	}{
		{"valid candidate id", {"candidate1"}, map["candidate1"]=50},
		{"invalid candidate id", {"invalid"}, nil},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := getCandidatesVote(tt.args.id)
			if!assert.NoError(t, err) {
				return
			}
			assert.Equal(t, tt.want, got)
		})
	}
}
